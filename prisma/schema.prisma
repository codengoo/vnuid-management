// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  Student
  Teacher
}

enum RepeatType {
  Weekly
}

enum AttendanceStatus {
  Valid
  Invalid
  Pending
}

model User {
  id             String   @id @default(uuid())
  email          String   @unique
  sid            String   @unique
  gid            String   @unique
  password       String
  name           String
  dob            DateTime
  official_class String
  authenticator  String?
  biometric_key  String?
  faceData       String?
  createdAt      DateTime @updatedAt
  updateAt       DateTime @updatedAt

  host        Subject[]    @relation("TeacherClass")
  join        Subject[]    @relation("StudentClass")
  type        UserType
  attendances Attendance[]

  @@map("users")
}

model Subject {
  id          String   @id @default(uuid())
  code        String
  name        String
  description String?
  openingDay  DateTime
  startTime   DateTime
  endTime     DateTime
  address     String

  teacherId    String
  teacher      User                @relation("TeacherClass", fields: [teacherId], references: [id])
  students     User[]              @relation("StudentClass")
  session      SessionAttendance[]
  sessionCycle SessionCycle[]

  @@map("subjects")
}

model SessionAttendance {
  id       String     @id @default(uuid())
  name     String
  start    DateTime
  duration Int
  repeat   RepeatType

  subjectId    String
  subject      Subject        @relation(fields: [subjectId], references: [id])
  SessionCycle SessionCycle[]

  @@map("session_attendances")
}

model SessionCycle {
  id    String   @id @default(uuid())
  start DateTime

  sessionId   String
  session     SessionAttendance @relation(fields: [sessionId], references: [id])
  subject     Subject?          @relation(fields: [subjectId], references: [id])
  subjectId   String?
  attendances Attendance[]

  @@map("session_cycles")
}

model Attendance {
  id       String           @id @default(uuid())
  time     DateTime
  status   AttendanceStatus
  deviceId String

  attendantId    String
  attendant      User         @relation(fields: [attendantId], references: [id])
  sessionCycleId String
  sessionCycle   SessionCycle @relation(fields: [sessionCycleId], references: [id])

  @@map("attendance")
}
