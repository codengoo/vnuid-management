// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  Student
  Teacher
}

enum RepeatType {
  Weekly
}

enum AttendanceStatus {
  Valid
  Invalid
  Pending
}

model User {
  id             String   @id @default(uuid())
  email          String   @unique
  sid            String   @unique
  gid            String   @unique
  password       String
  name           String
  dob            DateTime
  official_class String
  authenticator  String
  Biometric_key  String
  createdAt      DateTime
  UpdateAt       DateTime

  host        Class[]      @relation("TeacherClass")
  join        Class[]      @relation("StudentClass")
  type        UserType
  attendances Attendance[]

  @@map("users")
}

model Class {
  id         String   @id @default(uuid())
  code       String
  name       String
  openingDay DateTime
  startTime  DateTime
  endTime    DateTime
  address    String

  teacherId String
  teacher   User      @relation("TeacherClass", fields: [teacherId], references: [id])
  students  User[]    @relation("StudentClass")
  session   Session[]

  @@map("classes")
}

model Session {
  id       String     @id @default(uuid())
  name     String
  start    DateTime
  duration Int
  repeat   RepeatType

  classId      String
  class        Class          @relation(fields: [classId], references: [id])
  SessionCycle SessionCycle[]

  @@map("sessions")
}

model SessionCycle {
  id         String       @id @default(uuid())
  start      DateTime

  sessionId  String
  session    Session      @relation(fields: [sessionId], references: [id])
  Attendance Attendance[]

  @@map("session_cycles")
}

model Attendance {
  id             String           @id @default(uuid())
  time           DateTime
  status         AttendanceStatus
  deviceId       String
  
  attendantId    String
  attendant      User             @relation(fields: [attendantId], references: [id])
  sessionCycleId String
  sessionCycle   SessionCycle     @relation(fields: [sessionCycleId], references: [id])

  @@map("attendance")
}
