// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  Student
  Teacher
}

enum RepeatType {
  Weekly
}

model User {
  id            String  @id @default(uuid())
  email         String  @unique
  sid           String  @unique
  gid           String  @unique
  password      String?
  type          String
  authenticator String?
  biometric_key String?
  profile_id    String  @unique

  // Relations
  sessions Session[]
  nfcs     NFC[]
  profile  Profile   @relation(fields: [profile_id], references: [id], onDelete: Cascade)

  @@map("users")
}

model Profile {
  id             String    @id @default(uuid())
  sid            String
  email          String
  name           String
  dob            DateTime?
  official_class String
  phone          String    @default("")
  address        String    @default("")
  face_data      String?

  host        Subject[]    @relation("TeacherClass")
  join        Subject[]    @relation("StudentClass")
  attendances Attendance[]
  User        User?

  @@map("profiles")
}

model Session {
  id           String   @id @default(uuid())
  device_id    String
  device_name  String
  user_id      String?
  login_method String
  saved_device Boolean
  created_at   DateTime

  user User? @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model NFC {
  id      String  @id @default(uuid())
  user_id String
  active  Boolean
  status  String

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("nfcs")
}

model Subject {
  id          String   @id @default(uuid())
  code        String
  name        String
  description String?
  openingDay  DateTime
  startTime   DateTime
  endTime     DateTime
  address     String

  teacherId    String
  teacher      Profile             @relation("TeacherClass", fields: [teacherId], references: [id])
  students     Profile[]           @relation("StudentClass")
  session      SessionAttendance[]
  sessionCycle SessionCycle[]

  @@map("subjects")
}

model SessionAttendance {
  id       String     @id @default(uuid())
  name     String
  start    DateTime
  duration Int
  repeat   RepeatType

  subjectId    String
  subject      Subject        @relation(fields: [subjectId], references: [id])
  SessionCycle SessionCycle[]

  @@map("session_attendances")
}

model SessionCycle {
  id          String            @id @default(uuid())
  start       DateTime
  session_id  String
  session     SessionAttendance @relation(fields: [session_id], references: [id])
  subject     Subject?          @relation(fields: [subject_id], references: [id])
  subject_id  String?
  attendances Attendance[]

  @@unique([session_id, start])
  @@map("session_cycles")
}

model Attendance {
  id         String   @id @default(uuid())
  time       DateTime
  isVerified Boolean
  deviceId   String

  attendantId    String
  attendant      Profile      @relation(fields: [attendantId], references: [id])
  sessionCycleId String
  sessionCycle   SessionCycle @relation(fields: [sessionCycleId], references: [id])

  @@map("attendance")
}
